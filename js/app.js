// Generated by CoffeeScript 1.4.0
(function() {
  var ImageAnalyzer;

  ImageAnalyzer = function(image, frame) {
    var findEdgeColor, init, isBlackOrWhite;
    init = function(image, frame) {
      var frm, img;
      frm = document.getElementById(frame);
      img = new Image();
      img.src = image;
      return img.onload = function() {
        var color, ctx, cvs;
        cvs = document.createElement('canvas');
        cvs.width = img.width;
        cvs.height = img.height;
        ctx = cvs.getContext('2d');
        ctx.drawImage(img, 0, 0);
        color = findEdgeColor(cvs, ctx);
        return frm.style.background = 'rgb(' + color + ')';
      };
    };
    init(image, frame);
    findEdgeColor = function(cvs, ctx) {
      var blue, color, colorCount, count, green, index, leftEdgeColors, nextProposedEdgeColor, pixel, proposedEdgeColor, red, sortedColorCount, _i, _j, _len, _ref;
      leftEdgeColors = ctx.getImageData(0, 0, 1, cvs.height);
      colorCount = {};
      for (pixel = _i = 0, _ref = cvs.height; 0 <= _ref ? _i < _ref : _i > _ref; pixel = 0 <= _ref ? ++_i : --_i) {
        red = leftEdgeColors.data[pixel * 4];
        green = leftEdgeColors.data[pixel * 4 + 1];
        blue = leftEdgeColors.data[pixel * 4 + 2];
        index = red + ',' + green + ',' + blue;
        if (!colorCount[index]) {
          colorCount[index] = 0;
        }
        colorCount[index]++;
      }
      sortedColorCount = [];
      for (color in colorCount) {
        count = colorCount[color];
        if (count > 2) {
          sortedColorCount.push([color, count]);
        }
      }
      sortedColorCount.sort(function(a, b) {
        return b[1] - a[1];
      });
      proposedEdgeColor = sortedColorCount[0];
      if (isBlackOrWhite(proposedEdgeColor[0])) {
        for (_j = 0, _len = sortedColorCount.length; _j < _len; _j++) {
          nextProposedEdgeColor = sortedColorCount[_j];
          if (nextProposedEdgeColor[1] / proposedEdgeColor[1] > 0.4) {
            if (!isBlackOrWhite(nextProposedEdgeColor[0])) {
              proposedEdgeColor = nextProposedEdgeColor;
              break;
            }
          }
        }
      }
      return proposedEdgeColor[0];
    };
    return isBlackOrWhite = function(color) {
      var blue, green, red, splitted, tresholdBlack, tresholdWhite;
      splitted = color.split(',');
      red = splitted[0];
      green = splitted[1];
      blue = splitted[2];
      tresholdWhite = 255 * 0.91;
      tresholdBlack = 255 * 0.09;
      if (red > tresholdWhite && green > tresholdWhite && blue > tresholdWhite) {
        return true;
      }
      if (red < tresholdBlack && green < tresholdBlack && blue < tresholdBlack) {
        return true;
      }
      return false;
    };
  };

  $(function() {
    var color;
    return color = ImageAnalyzer('sample.jpg', 'frame');
  });

}).call(this);
